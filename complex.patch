--- src/systems/continuation_system.C	2015-11-08 14:33:01.447141461 +0100
+++ src/systems/continuation_system.C	2015-11-18 07:44:12.698909816 +0100
@@ -288,7 +288,8 @@
 
   // Initial change in parameter
   const Real dlambda = *continuation_parameter-old_continuation_parameter;
-  libmesh_assert_not_equal_to (dlambda, 0.0);
+  const std::complex<double> co0=0.0;
+  libmesh_assert_not_equal_to (dlambda, co0);
 
   // Ideal initial value of dlambda_ds
   dlambda_ds = 1. / std::sqrt(2.);
@@ -444,9 +445,10 @@
               // The new tolerance is based on the ratio of the most recent tolerances
               const Real alp=0.5*(1.+std::sqrt(5.));
               const Real gam=0.9;
+              const std::complex<double> co0=0.0;
 
-              libmesh_assert_not_equal_to (nonlinear_residual_beforestep, 0.0);
-              libmesh_assert_not_equal_to (nonlinear_residual_afterstep, 0.0);
+           libmesh_assert_not_equal_to (nonlinear_residual_beforestep, co0);
+              libmesh_assert_not_equal_to (nonlinear_residual_afterstep, co0);
 
               current_linear_tolerance = std::min(gam*std::pow(nonlinear_residual_afterstep/nonlinear_residual_beforestep, alp),
                                                   current_linear_tolerance*current_linear_tolerance
@@ -676,8 +678,9 @@
 
           const Number delta_lambda_numerator   = -(N          + Theta_LOCA*Theta_LOCA*Theta*duds_dot_z);
           const Number delta_lambda_denominator =  (dlambda_ds - Theta_LOCA*Theta_LOCA*Theta*duds_dot_y);
+          const std::complex<double> co0=0.0;
 
-          libmesh_assert_not_equal_to (delta_lambda_denominator, 0.0);
+          libmesh_assert_not_equal_to(delta_lambda_denominator, co0);
 
           // Now, we are ready to compute the step delta_lambda
           const Number delta_lambda_comp = delta_lambda_numerator /
@@ -1388,8 +1391,10 @@
 
   else if (predictor == AB2)
     {
+      const std::complex<double> co0=0.0;
+
       // 2.) 2nd-order explicit AB predictor
-      libmesh_assert_not_equal_to (previous_ds, 0.0);
+      libmesh_assert_not_equal_to (previous_ds, co0);
       const Real stepratio = ds_current/previous_ds;
 
       // Build up next solution value.

--- src/numerics/dense_matrix_base.C	2015-11-07 15:51:43.371021032 +0100
+++ src/numerics/dense_matrix_base.C	2015-11-18 07:42:02.806623712 +0100
@@ -41,13 +41,14 @@
   const unsigned int m_s = M2.m();
   const unsigned int p_s = M2.n();
   const unsigned int n_s = M1.n();
+  std::complex<double> co0=0.0;
 
   // Do it this way because there is a
   // decent chance (at least for constraint matrices)
   // that M3(k,j) = 0. when right-multiplying.
   for (unsigned int k=0; k<p_s; k++)
     for (unsigned int j=0; j<n_s; j++)
-      if (M3.el(k,j) != 0.)
+      if (M3.el(k,j) != co0)
         for (unsigned int i=0; i<m_s; i++)
           M1.el(i,j) += M2.el(i,k) * M3.el(k,j);
 }

--- src/numerics/dense_matrix.C	2015-11-07 15:24:44.193156172 +0100
+++ src/numerics/dense_matrix.C	2015-11-18 07:41:46.470336194 +0100
@@ -120,6 +120,7 @@
       else
         {
           DenseMatrix<T> B(*this);
+          std::complex<double> co0=0.0;
 
           this->resize (A.n(), B.n());
 
@@ -136,7 +137,7 @@
           // that A.transpose(i,k) = 0.
           for (unsigned int i=0; i<m_s; i++)
             for (unsigned int k=0; k<p_s; k++)
-              if (A.transpose(i,k) != 0.)
+              if (A.transpose(i,k) != co0)
                 for (unsigned int j=0; j<n_s; j++)
                   (*this)(i,j) += A.transpose(i,k)*B(k,j);
         }
@@ -292,6 +293,7 @@
       else
         {
           DenseMatrix<T> A(*this);
+          std::complex<double> co0=0.0;
 
           this->resize (A.m(), B.m());
 
@@ -308,7 +310,7 @@
           // that B.transpose(k,j) = 0.
           for (unsigned int j=0; j<n_s; j++)
             for (unsigned int k=0; k<p_s; k++)
-              if (B.transpose(k,j) != 0.)
+              if (B.transpose(j,k) != co0)
                 for (unsigned int i=0; i<m_s; i++)
                   (*this)(i,j) += A(i,k)*B.transpose(k,j);
         }
@@ -744,7 +746,8 @@
 
       // Scale upper triangle entries of row i by the diagonal entry
       // Note: don't scale the diagonal entry itself!
-      const T diag_inv = 1. / A(i,i);
+      double long1= 1.;  // need this cast here (Hubert)
+      const T diag_inv = long1 / A(i,i);
       for (unsigned int j=i+1; j<n_rows; ++j)
         A(i,j) *= diag_inv;

--- src/base/dof_map_constraints.C	2015-11-06 20:40:12.867191693 +0100
+++ src/base/dof_map_constraints.C	2015-11-18 07:41:14.104766560 +0100
@@ -584,7 +584,7 @@
                     current_dof++;
                     // xy derivative
                     Ue(current_dof) = (gxplus(1) - gxminus(1))
-                      / 2. / TOLERANCE;
+                      /( (std::complex<double>)(2.* TOLERANCE));
                     dof_is_fixed[current_dof] = true;
                     current_dof++;
 
@@ -596,7 +596,7 @@
                         current_dof++;
                         // xz derivative
                         Ue(current_dof) = (gxplus(2) - gxminus(2))
-                          / 2. / TOLERANCE;
+                          /( (std::complex<double>)(2.* TOLERANCE));
                         dof_is_fixed[current_dof] = true;
                         current_dof++;
                         // We need new points for yz
@@ -612,7 +612,7 @@
                                       nyplus, time);
                         // xz derivative
                         Ue(current_dof) = (gyplus(2) - gyminus(2))
-                          / 2. / TOLERANCE;
+                          /( (std::complex<double>)(2.* TOLERANCE));
                         dof_is_fixed[current_dof] = true;
                         current_dof++;
                         // Getting a 2nd order xyz is more tedious
@@ -641,12 +641,12 @@
                           g_component(g, g_fem, context.get(), var_component,
                                       nxpyp, time);
                         Number gxzplus = (gxpyp(2) - gxmyp(2))
-                          / 2. / TOLERANCE;
+                          /( (std::complex<double>)(2.* TOLERANCE));
                         Number gxzminus = (gxpym(2) - gxmym(2))
-                          / 2. / TOLERANCE;
+                          /( (std::complex<double>)(2.* TOLERANCE));
                         // xyz derivative
                         Ue(current_dof) = (gxzplus - gxzminus)
-                          / 2. / TOLERANCE;
+                          /( (std::complex<double>)(2.* TOLERANCE));
                         dof_is_fixed[current_dof] = true;
                         current_dof++;
                       }
 
--- src/fe/fe_l2_lagrange.C	2015-11-07 13:05:50.931813893 +0100
+++ src/fe/fe_l2_lagrange.C	2015-11-18 08:04:59.971861813 +0100
@@ -41,6 +41,11 @@
 {
   const unsigned int n_nodes = elem->n_nodes();
   const ElemType type        = elem->type();
+  std::complex<double> co0_5=.5;
+  std::complex<double> co8=8.;
+  std::complex<double> co3=3.;
+  std::complex<double> co2=2.;
+
 
   const Order totalorder = static_cast<Order>(order+elem->p_level());
 
@@ -62,7 +67,7 @@
 
               nodal_soln[0] = elem_soln[0];
               nodal_soln[1] = elem_soln[1];
-              nodal_soln[2] = .5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[2] = co0_5*(elem_soln[0] + elem_soln[1]);
 
               return;
             }
@@ -74,8 +79,8 @@
 
               nodal_soln[0] = elem_soln[0];
               nodal_soln[1] = elem_soln[1];
-              nodal_soln[2] = (2.*elem_soln[0] + elem_soln[1])/3.;
-              nodal_soln[3] = (elem_soln[0] + 2.*elem_soln[1])/3.;
+              nodal_soln[2] = (co2*elem_soln[0] + elem_soln[1])/co3;
+              nodal_soln[3] = (elem_soln[0] + co2*elem_soln[1])/co3;
 
               return;
             }
@@ -89,9 +94,9 @@
               nodal_soln[0] = elem_soln[0];
               nodal_soln[1] = elem_soln[1];
               nodal_soln[2] = elem_soln[2];
-              nodal_soln[3] = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[4] = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[5] = .5*(elem_soln[2] + elem_soln[0]);
+              nodal_soln[3] = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[4] = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[5] = co0_5*(elem_soln[2] + elem_soln[0]);
 
               return;
             }
@@ -112,13 +117,13 @@
               nodal_soln[1] = elem_soln[1];
               nodal_soln[2] = elem_soln[2];
               nodal_soln[3] = elem_soln[3];
-              nodal_soln[4] = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[5] = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[6] = .5*(elem_soln[2] + elem_soln[3]);
-              nodal_soln[7] = .5*(elem_soln[3] + elem_soln[0]);
+              nodal_soln[4] = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[5] = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[6] = co0_5*(elem_soln[2] + elem_soln[3]);
+              nodal_soln[7] = co0_5*(elem_soln[3] + elem_soln[0]);
 
               if (type == QUAD9)
-                nodal_soln[8] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
+                nodal_soln[8] = co0_5*co0_5*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
 
               return;
             }
@@ -133,12 +138,12 @@
               nodal_soln[1] = elem_soln[1];
               nodal_soln[2] = elem_soln[2];
               nodal_soln[3] = elem_soln[3];
-              nodal_soln[4] = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[5] = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[6] = .5*(elem_soln[2] + elem_soln[0]);
-              nodal_soln[7] = .5*(elem_soln[3] + elem_soln[0]);
-              nodal_soln[8] = .5*(elem_soln[3] + elem_soln[1]);
-              nodal_soln[9] = .5*(elem_soln[3] + elem_soln[2]);
+              nodal_soln[4] = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[5] = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[6] = co0_5*(elem_soln[2] + elem_soln[0]);
+              nodal_soln[7] = co0_5*(elem_soln[3] + elem_soln[0]);
+              nodal_soln[8] = co0_5*(elem_soln[3] + elem_soln[1]);
+              nodal_soln[9] = co0_5*(elem_soln[3] + elem_soln[2]);
 
               return;
             }
@@ -162,29 +167,30 @@
               nodal_soln[5]  = elem_soln[5];
               nodal_soln[6]  = elem_soln[6];
               nodal_soln[7]  = elem_soln[7];
-              nodal_soln[8]  = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[9]  = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[10] = .5*(elem_soln[2] + elem_soln[3]);
-              nodal_soln[11] = .5*(elem_soln[3] + elem_soln[0]);
-              nodal_soln[12] = .5*(elem_soln[0] + elem_soln[4]);
-              nodal_soln[13] = .5*(elem_soln[1] + elem_soln[5]);
-              nodal_soln[14] = .5*(elem_soln[2] + elem_soln[6]);
-              nodal_soln[15] = .5*(elem_soln[3] + elem_soln[7]);
-              nodal_soln[16] = .5*(elem_soln[4] + elem_soln[5]);
-              nodal_soln[17] = .5*(elem_soln[5] + elem_soln[6]);
-              nodal_soln[18] = .5*(elem_soln[6] + elem_soln[7]);
-              nodal_soln[19] = .5*(elem_soln[4] + elem_soln[7]);
+              nodal_soln[8]  = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[9]  = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[10] = co0_5*(elem_soln[2] + elem_soln[3]);
+              nodal_soln[11] = co0_5*(elem_soln[3] + elem_soln[0]);
+              nodal_soln[12] = co0_5*(elem_soln[0] + elem_soln[4]);
+              nodal_soln[13] = co0_5*(elem_soln[1] + elem_soln[5]);
+              nodal_soln[14] = co0_5*(elem_soln[2] + elem_soln[6]);
+              nodal_soln[15] = co0_5*(elem_soln[3] + elem_soln[7]);
+              nodal_soln[16] = co0_5*(elem_soln[4] + elem_soln[5]);
+              nodal_soln[17] = co0_5*(elem_soln[5] + elem_soln[6]);
+              nodal_soln[18] = co0_5*(elem_soln[6] + elem_soln[7]);
+              nodal_soln[19] = co0_5*(elem_soln[4] + elem_soln[7]);
 
               if (type == HEX27)
                 {
-                  nodal_soln[20] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
-                  nodal_soln[21] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[4] + elem_soln[5]);
-                  nodal_soln[22] = .25*(elem_soln[1] + elem_soln[2] + elem_soln[5] + elem_soln[6]);
-                  nodal_soln[23] = .25*(elem_soln[2] + elem_soln[3] + elem_soln[6] + elem_soln[7]);
-                  nodal_soln[24] = .25*(elem_soln[3] + elem_soln[0] + elem_soln[7] + elem_soln[4]);
-                  nodal_soln[25] = .25*(elem_soln[4] + elem_soln[5] + elem_soln[6] + elem_soln[7]);
+                  nodal_soln[20] = co0_5*co0_5*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
+                  nodal_soln[21] = co0_5*co0_5*(elem_soln[0] + elem_soln[1] + elem_soln[4] + elem_soln[5]);
+                  nodal_soln[22] = co0_5*co0_5*(elem_soln[1] + elem_soln[2] + elem_soln[5] + elem_soln[6]);
+                  nodal_soln[23] = co0_5*co0_5*(elem_soln[2] + elem_soln[3] + elem_soln[6] + elem_soln[7]);
+                  nodal_soln[24] = co0_5*co0_5*(elem_soln[3] + elem_soln[0] + elem_soln[7] + elem_soln[4]);
+                  nodal_soln[25] = co0_5*co0_5*(elem_soln[4] + elem_soln[5] + elem_soln[6] + elem_soln[7]);
 
-                  nodal_soln[26] = .125*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3] +
+                  nodal_soln[26] = co0_5*co0_5*co0_5*(elem_soln[0] + elem_soln[1] + 
+                                                            elem_soln[2] + elem_soln[3] +
                                          elem_soln[4] + elem_soln[5] + elem_soln[6] + elem_soln[7]);
                 }
 
@@ -208,21 +214,21 @@
               nodal_soln[3]  = elem_soln[3];
               nodal_soln[4]  = elem_soln[4];
               nodal_soln[5]  = elem_soln[5];
-              nodal_soln[6]  = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[7]  = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[8]  = .5*(elem_soln[0] + elem_soln[2]);
-              nodal_soln[9]  = .5*(elem_soln[0] + elem_soln[3]);
-              nodal_soln[10] = .5*(elem_soln[1] + elem_soln[4]);
-              nodal_soln[11] = .5*(elem_soln[2] + elem_soln[5]);
-              nodal_soln[12] = .5*(elem_soln[3] + elem_soln[4]);
-              nodal_soln[13] = .5*(elem_soln[4] + elem_soln[5]);
-              nodal_soln[14] = .5*(elem_soln[3] + elem_soln[5]);
-
+              nodal_soln[6]  = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[7]  = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[8]  = co0_5*(elem_soln[0] + elem_soln[2]);
+              nodal_soln[9]  = co0_5*(elem_soln[0] + elem_soln[3]);
+              nodal_soln[10] = co0_5*(elem_soln[1] + elem_soln[4]);
+              nodal_soln[11] = co0_5*(elem_soln[2] + elem_soln[5]);
+              nodal_soln[12] = co0_5*(elem_soln[3] + elem_soln[4]);
+              nodal_soln[13] = co0_5*(elem_soln[4] + elem_soln[5]);
+              nodal_soln[14] = co0_5*(elem_soln[3] + elem_soln[5]);
+                               
               if (type == PRISM18)
-                {
-                  nodal_soln[15] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[4] + elem_soln[3]);
-                  nodal_soln[16] = .25*(elem_soln[1] + elem_soln[2] + elem_soln[5] + elem_soln[4]);
-                  nodal_soln[17] = .25*(elem_soln[2] + elem_soln[0] + elem_soln[3] + elem_soln[5]);
+                {              
+                  nodal_soln[15] = co0_5*co0_5*(elem_soln[0] + elem_soln[1] + elem_soln[4] + elem_soln[3]);
+                  nodal_soln[16] = co0_5*co0_5*(elem_soln[1] + elem_soln[2] + elem_soln[5] + elem_soln[4]);
+                  nodal_soln[17] = co0_5*co0_5*(elem_soln[2] + elem_soln[0] + elem_soln[3] + elem_soln[5]);
                 }
 
               return;
@@ -253,10 +259,10 @@
               // Project quadratic solution onto cubic element nodes
               nodal_soln[0] = elem_soln[0];
               nodal_soln[1] = elem_soln[1];
-              nodal_soln[2] = (2.*elem_soln[0] - elem_soln[1] +
-                               8.*elem_soln[2])/9.;
-              nodal_soln[3] = (-elem_soln[0] + 2.*elem_soln[1] +
-                               8.*elem_soln[2])/9.;
+              nodal_soln[2] = (co2*elem_soln[0] - elem_soln[1] +
+                               co8*elem_soln[2])/(co3*co3);
+              nodal_soln[3] = (-elem_soln[0] + co2*elem_soln[1] +
+                               co8*elem_soln[2])/(co3*co3);
               return;
             }
 
--- src/fe/fe_lagrange.C	2015-11-07 13:38:17.326370770 +0100
+++ src/fe/fe_lagrange.C	2015-11-18 08:08:26.412495167 +0100
@@ -43,6 +43,10 @@
   const ElemType type        = elem->type();
 
   const Order totalorder = static_cast<Order>(order+elem->p_level());
+  std::complex<double> co0_5=.5;
+  std::complex<double> co8=8.;
+  std::complex<double> co3=3.;
+  std::complex<double> co2=2.;
 
   nodal_soln.resize(n_nodes);
 
@@ -62,7 +66,7 @@
 
               nodal_soln[0] = elem_soln[0];
               nodal_soln[1] = elem_soln[1];
-              nodal_soln[2] = .5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[2] = co0_5*(elem_soln[0] + elem_soln[1]);
 
               return;
             }
@@ -74,8 +78,8 @@
 
               nodal_soln[0] = elem_soln[0];
               nodal_soln[1] = elem_soln[1];
-              nodal_soln[2] = (2.*elem_soln[0] + elem_soln[1])/3.;
-              nodal_soln[3] = (elem_soln[0] + 2.*elem_soln[1])/3.;
+              nodal_soln[2] = (co2*elem_soln[0] + elem_soln[1])/co3;
+              nodal_soln[3] = (elem_soln[0] + co2*elem_soln[1])/co3;
 
               return;
             }
@@ -89,9 +93,9 @@
               nodal_soln[0] = elem_soln[0];
               nodal_soln[1] = elem_soln[1];
               nodal_soln[2] = elem_soln[2];
-              nodal_soln[3] = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[4] = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[5] = .5*(elem_soln[2] + elem_soln[0]);
+              nodal_soln[3] = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[4] = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[5] = co0_5*(elem_soln[2] + elem_soln[0]);
 
               return;
             }
@@ -112,13 +116,13 @@
               nodal_soln[1] = elem_soln[1];
               nodal_soln[2] = elem_soln[2];
               nodal_soln[3] = elem_soln[3];
-              nodal_soln[4] = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[5] = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[6] = .5*(elem_soln[2] + elem_soln[3]);
-              nodal_soln[7] = .5*(elem_soln[3] + elem_soln[0]);
-
+              nodal_soln[4] = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[5] = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[6] = co0_5*(elem_soln[2] + elem_soln[3]);
+              nodal_soln[7] = co0_5*(elem_soln[3] + elem_soln[0]);
+                               
               if (type == QUAD9)
-                nodal_soln[8] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
+                nodal_soln[8] = co0_5*co0_5*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
 
               return;
             }
@@ -133,12 +137,12 @@
               nodal_soln[1] = elem_soln[1];
               nodal_soln[2] = elem_soln[2];
               nodal_soln[3] = elem_soln[3];
-              nodal_soln[4] = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[5] = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[6] = .5*(elem_soln[2] + elem_soln[0]);
-              nodal_soln[7] = .5*(elem_soln[3] + elem_soln[0]);
-              nodal_soln[8] = .5*(elem_soln[3] + elem_soln[1]);
-              nodal_soln[9] = .5*(elem_soln[3] + elem_soln[2]);
+              nodal_soln[4] = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[5] = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[6] = co0_5*(elem_soln[2] + elem_soln[0]);
+              nodal_soln[7] = co0_5*(elem_soln[3] + elem_soln[0]);
+              nodal_soln[8] = co0_5*(elem_soln[3] + elem_soln[1]);
+              nodal_soln[9] = co0_5*(elem_soln[3] + elem_soln[2]);
 
               return;
             }
@@ -162,29 +166,29 @@
               nodal_soln[5]  = elem_soln[5];
               nodal_soln[6]  = elem_soln[6];
               nodal_soln[7]  = elem_soln[7];
-              nodal_soln[8]  = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[9]  = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[10] = .5*(elem_soln[2] + elem_soln[3]);
-              nodal_soln[11] = .5*(elem_soln[3] + elem_soln[0]);
-              nodal_soln[12] = .5*(elem_soln[0] + elem_soln[4]);
-              nodal_soln[13] = .5*(elem_soln[1] + elem_soln[5]);
-              nodal_soln[14] = .5*(elem_soln[2] + elem_soln[6]);
-              nodal_soln[15] = .5*(elem_soln[3] + elem_soln[7]);
-              nodal_soln[16] = .5*(elem_soln[4] + elem_soln[5]);
-              nodal_soln[17] = .5*(elem_soln[5] + elem_soln[6]);
-              nodal_soln[18] = .5*(elem_soln[6] + elem_soln[7]);
-              nodal_soln[19] = .5*(elem_soln[4] + elem_soln[7]);
+              nodal_soln[8]  = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[9]  = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[10] = co0_5*(elem_soln[2] + elem_soln[3]);
+              nodal_soln[11] = co0_5*(elem_soln[3] + elem_soln[0]);
+              nodal_soln[12] = co0_5*(elem_soln[0] + elem_soln[4]);
+              nodal_soln[13] = co0_5*(elem_soln[1] + elem_soln[5]);
+              nodal_soln[14] = co0_5*(elem_soln[2] + elem_soln[6]);
+              nodal_soln[15] = co0_5*(elem_soln[3] + elem_soln[7]);
+              nodal_soln[16] = co0_5*(elem_soln[4] + elem_soln[5]);
+              nodal_soln[17] = co0_5*(elem_soln[5] + elem_soln[6]);
+              nodal_soln[18] = co0_5*(elem_soln[6] + elem_soln[7]);
+              nodal_soln[19] = co0_5*(elem_soln[4] + elem_soln[7]);
 
               if (type == HEX27)
                 {
-                  nodal_soln[20] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
-                  nodal_soln[21] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[4] + elem_soln[5]);
-                  nodal_soln[22] = .25*(elem_soln[1] + elem_soln[2] + elem_soln[5] + elem_soln[6]);
-                  nodal_soln[23] = .25*(elem_soln[2] + elem_soln[3] + elem_soln[6] + elem_soln[7]);
-                  nodal_soln[24] = .25*(elem_soln[3] + elem_soln[0] + elem_soln[7] + elem_soln[4]);
-                  nodal_soln[25] = .25*(elem_soln[4] + elem_soln[5] + elem_soln[6] + elem_soln[7]);
+                  nodal_soln[20] = co0_5*co0_5*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
+                  nodal_soln[21] = co0_5*co0_5*(elem_soln[0] + elem_soln[1] + elem_soln[4] + elem_soln[5]);
+                  nodal_soln[22] = co0_5*co0_5*(elem_soln[1] + elem_soln[2] + elem_soln[5] + elem_soln[6]);
+                  nodal_soln[23] = co0_5*co0_5*(elem_soln[2] + elem_soln[3] + elem_soln[6] + elem_soln[7]);
+                  nodal_soln[24] = co0_5*co0_5*(elem_soln[3] + elem_soln[0] + elem_soln[7] + elem_soln[4]);
+                  nodal_soln[25] = co0_5*co0_5*(elem_soln[4] + elem_soln[5] + elem_soln[6] + elem_soln[7]);
 
-                  nodal_soln[26] = .125*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3] +
+                  nodal_soln[26] = co0_5*co0_5*co0_5*(elem_soln[0]+elem_soln[1]+elem_soln[2]+elem_soln[3] +
                                          elem_soln[4] + elem_soln[5] + elem_soln[6] + elem_soln[7]);
                 }
 
@@ -208,21 +212,21 @@
               nodal_soln[3]  = elem_soln[3];
               nodal_soln[4]  = elem_soln[4];
               nodal_soln[5]  = elem_soln[5];
-              nodal_soln[6]  = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[7]  = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[8]  = .5*(elem_soln[0] + elem_soln[2]);
-              nodal_soln[9]  = .5*(elem_soln[0] + elem_soln[3]);
-              nodal_soln[10] = .5*(elem_soln[1] + elem_soln[4]);
-              nodal_soln[11] = .5*(elem_soln[2] + elem_soln[5]);
-              nodal_soln[12] = .5*(elem_soln[3] + elem_soln[4]);
-              nodal_soln[13] = .5*(elem_soln[4] + elem_soln[5]);
-              nodal_soln[14] = .5*(elem_soln[3] + elem_soln[5]);
-
+              nodal_soln[6]  = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[7]  = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[8]  = co0_5*(elem_soln[0] + elem_soln[2]);
+              nodal_soln[9]  = co0_5*(elem_soln[0] + elem_soln[3]);
+              nodal_soln[10] = co0_5*(elem_soln[1] + elem_soln[4]);
+              nodal_soln[11] = co0_5*(elem_soln[2] + elem_soln[5]);
+              nodal_soln[12] = co0_5*(elem_soln[3] + elem_soln[4]);
+              nodal_soln[13] = co0_5*(elem_soln[4] + elem_soln[5]);
+              nodal_soln[14] = co0_5*(elem_soln[3] + elem_soln[5]);
+                               
               if (type == PRISM18)
-                {
-                  nodal_soln[15] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[4] + elem_soln[3]);
-                  nodal_soln[16] = .25*(elem_soln[1] + elem_soln[2] + elem_soln[5] + elem_soln[4]);
-                  nodal_soln[17] = .25*(elem_soln[2] + elem_soln[0] + elem_soln[3] + elem_soln[5]);
+                {              
+                  nodal_soln[15] = co0_5*co0_5*(elem_soln[0] + elem_soln[1] + elem_soln[4] + elem_soln[3]);
+                  nodal_soln[16] = co0_5*co0_5*(elem_soln[1] + elem_soln[2] + elem_soln[5] + elem_soln[4]);
+                  nodal_soln[17] = co0_5*co0_5*(elem_soln[2] + elem_soln[0] + elem_soln[3] + elem_soln[5]);
                 }
 
               return;
@@ -238,18 +242,18 @@
               nodal_soln[2]  = elem_soln[2];
               nodal_soln[3]  = elem_soln[3];
               nodal_soln[4]  = elem_soln[4];
-              nodal_soln[5]  = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[6]  = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[7]  = .5*(elem_soln[2] + elem_soln[3]);
-              nodal_soln[8]  = .5*(elem_soln[3] + elem_soln[0]);
-              nodal_soln[9]  = .5*(elem_soln[0] + elem_soln[4]);
-              nodal_soln[10] = .5*(elem_soln[1] + elem_soln[4]);
-              nodal_soln[11] = .5*(elem_soln[2] + elem_soln[4]);
-              nodal_soln[12] = .5*(elem_soln[3] + elem_soln[4]);
-
-              return;
-            }
-
+              nodal_soln[5]  = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[6]  = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[7]  = co0_5*(elem_soln[2] + elem_soln[3]);
+              nodal_soln[8]  = co0_5*(elem_soln[3] + elem_soln[0]);
+              nodal_soln[9]  = co0_5*(elem_soln[0] + elem_soln[4]);
+              nodal_soln[10] = co0_5*(elem_soln[1] + elem_soln[4]);
+              nodal_soln[11] = co0_5*(elem_soln[2] + elem_soln[4]);
+              nodal_soln[12] = co0_5*(elem_soln[3] + elem_soln[4]);
+                               
+              return;          
+            }                  
+                               
           case PYRAMID14:
             {
               libmesh_assert_equal_to (elem_soln.size(), 5);
@@ -260,18 +264,18 @@
               nodal_soln[2]  = elem_soln[2];
               nodal_soln[3]  = elem_soln[3];
               nodal_soln[4]  = elem_soln[4];
-              nodal_soln[5]  = .5*(elem_soln[0] + elem_soln[1]);
-              nodal_soln[6]  = .5*(elem_soln[1] + elem_soln[2]);
-              nodal_soln[7]  = .5*(elem_soln[2] + elem_soln[3]);
-              nodal_soln[8]  = .5*(elem_soln[3] + elem_soln[0]);
-              nodal_soln[9]  = .5*(elem_soln[0] + elem_soln[4]);
-              nodal_soln[10] = .5*(elem_soln[1] + elem_soln[4]);
-              nodal_soln[11] = .5*(elem_soln[2] + elem_soln[4]);
-              nodal_soln[12] = .5*(elem_soln[3] + elem_soln[4]);
-              nodal_soln[13] = .25*(elem_soln[0] + elem_soln[1] + elem_soln[2] + elem_soln[3]);
-
+              nodal_soln[5]  = co0_5*(elem_soln[0] + elem_soln[1]);
+              nodal_soln[6]  = co0_5*(elem_soln[1] + elem_soln[2]);
+              nodal_soln[7]  = co0_5*(elem_soln[2] + elem_soln[3]);
+              nodal_soln[8]  = co0_5*(elem_soln[3] + elem_soln[0]);
+              nodal_soln[9]  = co0_5*(elem_soln[0] + elem_soln[4]);
+              nodal_soln[10] = co0_5*(elem_soln[1] + elem_soln[4]);
+              nodal_soln[11] = co0_5*(elem_soln[2] + elem_soln[4]);
+              nodal_soln[12] = co0_5*(elem_soln[3] + elem_soln[4]);
+              nodal_soln[13] = co0_5*co0_5*(elem_soln[0]+elem_soln[1]+elem_soln[2]+elem_soln[3]);
+                     
               return;
-            }
+            }        
 
           default:
             {
@@ -296,10 +300,10 @@
               // Project quadratic solution onto cubic element nodes
               nodal_soln[0] = elem_soln[0];
               nodal_soln[1] = elem_soln[1];
-              nodal_soln[2] = (2.*elem_soln[0] - elem_soln[1] +
-                               8.*elem_soln[2])/9.;
-              nodal_soln[3] = (-elem_soln[0] + 2.*elem_soln[1] +
-                               8.*elem_soln[2])/9.;
+              nodal_soln[2] = (co2*elem_soln[0] - elem_soln[1] +
+                               co8*elem_soln[2])/(co3*co3);
+              nodal_soln[3] = (-elem_soln[0] + co2*elem_soln[1] +
+                               co8*elem_soln[2])/(co3*co3);
               return;
             }
 
--- src/fe/fe_lagrange_vec.C	2015-11-07 14:55:13.891175478 +0100
+++ src/fe/fe_lagrange_vec.C	2015-11-18 08:12:35.856885387 +0100
@@ -42,6 +42,7 @@
 {
   const unsigned int n_nodes = elem->n_nodes();
   const ElemType type        = elem->type();
+  std::complex<double> co0_5=.5;
 
   const Order totalorder = static_cast<Order>(order+elem->p_level());
 
@@ -72,16 +73,16 @@
               nodal_soln[5] = elem_soln[5];
 
               // node 3 components
-              nodal_soln[6] = .5*(elem_soln[0] + elem_soln[2]);
-              nodal_soln[7] = .5*(elem_soln[1] + elem_soln[3]);
+              nodal_soln[6] = co0_5*(elem_soln[0] + elem_soln[2]);
+              nodal_soln[7] = co0_5*(elem_soln[1] + elem_soln[3]);
 
               // node 4 components
-              nodal_soln[8] = .5*(elem_soln[2] + elem_soln[4]);
-              nodal_soln[9] = .5*(elem_soln[3] + elem_soln[5]);
+              nodal_soln[8] = co0_5*(elem_soln[2] + elem_soln[4]);
+              nodal_soln[9] = co0_5*(elem_soln[3] + elem_soln[5]);
 
               // node 5 components
-              nodal_soln[10] = .5*(elem_soln[0] + elem_soln[4]);
-              nodal_soln[11] = .5*(elem_soln[1] + elem_soln[5]);
+              nodal_soln[10] = co0_5*(elem_soln[0] + elem_soln[4]);
+              nodal_soln[11] = co0_5*(elem_soln[1] + elem_soln[5]);
 
               return;
             }
@@ -114,26 +115,26 @@
               nodal_soln[7] = elem_soln[7];
 
               // node 4 components
-              nodal_soln[8] = .5*(elem_soln[0] + elem_soln[2]);
-              nodal_soln[9] = .5*(elem_soln[1] + elem_soln[3]);
+              nodal_soln[8] = co0_5*(elem_soln[0] + elem_soln[2]);
+              nodal_soln[9] = co0_5*(elem_soln[1] + elem_soln[3]);
 
               // node 5 components
-              nodal_soln[10] = .5*(elem_soln[2] + elem_soln[4]);
-              nodal_soln[11] = .5*(elem_soln[3] + elem_soln[5]);
+              nodal_soln[10] = co0_5*(elem_soln[2] + elem_soln[4]);
+              nodal_soln[11] = co0_5*(elem_soln[3] + elem_soln[5]);
 
               // node 6 components
-              nodal_soln[12] = .5*(elem_soln[4] + elem_soln[6]);
-              nodal_soln[13] = .5*(elem_soln[5] + elem_soln[7]);
+              nodal_soln[12] = co0_5*(elem_soln[4] + elem_soln[6]);
+              nodal_soln[13] = co0_5*(elem_soln[5] + elem_soln[7]);
 
               // node 7 components
-              nodal_soln[14] = .5*(elem_soln[6] + elem_soln[0]);
-              nodal_soln[15] = .5*(elem_soln[7] + elem_soln[1]);
+              nodal_soln[14] = co0_5*(elem_soln[6] + elem_soln[0]);
+              nodal_soln[15] = co0_5*(elem_soln[7] + elem_soln[1]);
 
               if (type == QUAD9)
                 {
                   // node 8 components
-                  nodal_soln[16] = .25*(elem_soln[0] + elem_soln[2] + elem_soln[4] + elem_soln[6]);
-                  nodal_soln[17] = .25*(elem_soln[1] + elem_soln[3] + elem_soln[5] + elem_soln[7]);
+                  nodal_soln[16] = co0_5*co0_5*(elem_soln[0] + elem_soln[2] + elem_soln[4] + elem_soln[6]);
+                  nodal_soln[17] = co0_5*co0_5*(elem_soln[1] + elem_soln[3] + elem_soln[5] + elem_soln[7]);
                 }
 
               return;
@@ -166,34 +167,34 @@
               nodal_soln[11] = elem_soln[11];
 
               // node 4 components
-              nodal_soln[12] = .5*(elem_soln[0] + elem_soln[3]);
-              nodal_soln[13] = .5*(elem_soln[1] + elem_soln[4]);
-              nodal_soln[14] = .5*(elem_soln[2] + elem_soln[5]);
+              nodal_soln[12] = co0_5*(elem_soln[0] + elem_soln[3]);
+              nodal_soln[13] = co0_5*(elem_soln[1] + elem_soln[4]);
+              nodal_soln[14] = co0_5*(elem_soln[2] + elem_soln[5]);
 
               // node 5 components
-              nodal_soln[15] = .5*(elem_soln[3] + elem_soln[6]);
-              nodal_soln[16] = .5*(elem_soln[4] + elem_soln[7]);
-              nodal_soln[17] = .5*(elem_soln[5] + elem_soln[8]);
+              nodal_soln[15] = co0_5*(elem_soln[3] + elem_soln[6]);
+              nodal_soln[16] = co0_5*(elem_soln[4] + elem_soln[7]);
+              nodal_soln[17] = co0_5*(elem_soln[5] + elem_soln[8]);
 
               // node 6 components
-              nodal_soln[18] = .5*(elem_soln[6] + elem_soln[0]);
-              nodal_soln[19] = .5*(elem_soln[7] + elem_soln[1]);
-              nodal_soln[20] = .5*(elem_soln[8] + elem_soln[2]);
+              nodal_soln[18] = co0_5*(elem_soln[6] + elem_soln[0]);
+              nodal_soln[19] = co0_5*(elem_soln[7] + elem_soln[1]);
+              nodal_soln[20] = co0_5*(elem_soln[8] + elem_soln[2]);
 
               // node 7 components
-              nodal_soln[21] = .5*(elem_soln[9]  + elem_soln[0]);
-              nodal_soln[22] = .5*(elem_soln[10] + elem_soln[1]);
-              nodal_soln[23] = .5*(elem_soln[11] + elem_soln[2]);
+              nodal_soln[21] = co0_5*(elem_soln[9]  + elem_soln[0]);
+              nodal_soln[22] = co0_5*(elem_soln[10] + elem_soln[1]);
+              nodal_soln[23] = co0_5*(elem_soln[11] + elem_soln[2]);
 
               // node 8 components
-              nodal_soln[24] = .5*(elem_soln[9]  + elem_soln[3]);
-              nodal_soln[25] = .5*(elem_soln[10] + elem_soln[4]);
-              nodal_soln[26] = .5*(elem_soln[11] + elem_soln[5]);
+              nodal_soln[24] = co0_5*(elem_soln[9]  + elem_soln[3]);
+              nodal_soln[25] = co0_5*(elem_soln[10] + elem_soln[4]);
+              nodal_soln[26] = co0_5*(elem_soln[11] + elem_soln[5]);
 
               // node 9 components
-              nodal_soln[27] = .5*(elem_soln[9]  + elem_soln[6]);
-              nodal_soln[28] = .5*(elem_soln[10] + elem_soln[7]);
-              nodal_soln[29] = .5*(elem_soln[11] + elem_soln[8]);
+              nodal_soln[27] = co0_5*(elem_soln[9]  + elem_soln[6]);
+              nodal_soln[28] = co0_5*(elem_soln[10] + elem_soln[7]);
+              nodal_soln[29] = co0_5*(elem_soln[11] + elem_soln[8]);
 
               return;
             }
@@ -250,105 +251,105 @@
               nodal_soln[23]  = elem_soln[23];
 
               // node 8 components
-              nodal_soln[24]  = .5*(elem_soln[0] + elem_soln[3]);
-              nodal_soln[25]  = .5*(elem_soln[1] + elem_soln[4]);
-              nodal_soln[26]  = .5*(elem_soln[2] + elem_soln[5]);
+              nodal_soln[24]  = co0_5*(elem_soln[0] + elem_soln[3]);
+              nodal_soln[25]  = co0_5*(elem_soln[1] + elem_soln[4]);
+              nodal_soln[26]  = co0_5*(elem_soln[2] + elem_soln[5]);
 
               // node 9 components
-              nodal_soln[27]  = .5*(elem_soln[3] + elem_soln[6]);
-              nodal_soln[28]  = .5*(elem_soln[4] + elem_soln[7]);
-              nodal_soln[29]  = .5*(elem_soln[5] + elem_soln[8]);
+              nodal_soln[27]  = co0_5*(elem_soln[3] + elem_soln[6]);
+              nodal_soln[28]  = co0_5*(elem_soln[4] + elem_soln[7]);
+              nodal_soln[29]  = co0_5*(elem_soln[5] + elem_soln[8]);
 
               // node 10 components
-              nodal_soln[30]  = .5*(elem_soln[6] + elem_soln[9]);
-              nodal_soln[31]  = .5*(elem_soln[7] + elem_soln[10]);
-              nodal_soln[32]  = .5*(elem_soln[8] + elem_soln[11]);
+              nodal_soln[30]  = co0_5*(elem_soln[6] + elem_soln[9]);
+              nodal_soln[31]  = co0_5*(elem_soln[7] + elem_soln[10]);
+              nodal_soln[32]  = co0_5*(elem_soln[8] + elem_soln[11]);
 
               // node 11 components
-              nodal_soln[33]  = .5*(elem_soln[9]  + elem_soln[0]);
-              nodal_soln[34]  = .5*(elem_soln[10] + elem_soln[1]);
-              nodal_soln[35]  = .5*(elem_soln[11] + elem_soln[2]);
+              nodal_soln[33]  = co0_5*(elem_soln[9]  + elem_soln[0]);
+              nodal_soln[34]  = co0_5*(elem_soln[10] + elem_soln[1]);
+              nodal_soln[35]  = co0_5*(elem_soln[11] + elem_soln[2]);
 
               // node 12 components
-              nodal_soln[36]  = .5*(elem_soln[0] + elem_soln[12]);
-              nodal_soln[37]  = .5*(elem_soln[1] + elem_soln[13]);
-              nodal_soln[38]  = .5*(elem_soln[2] + elem_soln[14]);
+              nodal_soln[36]  = co0_5*(elem_soln[0] + elem_soln[12]);
+              nodal_soln[37]  = co0_5*(elem_soln[1] + elem_soln[13]);
+              nodal_soln[38]  = co0_5*(elem_soln[2] + elem_soln[14]);
 
               // node 13 components
-              nodal_soln[39]  = .5*(elem_soln[3] + elem_soln[15]);
-              nodal_soln[40]  = .5*(elem_soln[4] + elem_soln[16]);
-              nodal_soln[41]  = .5*(elem_soln[5] + elem_soln[17]);
+              nodal_soln[39]  = co0_5*(elem_soln[3] + elem_soln[15]);
+              nodal_soln[40]  = co0_5*(elem_soln[4] + elem_soln[16]);
+              nodal_soln[41]  = co0_5*(elem_soln[5] + elem_soln[17]);
 
               // node 14 components
-              nodal_soln[42]  = .5*(elem_soln[6] + elem_soln[18]);
-              nodal_soln[43]  = .5*(elem_soln[7] + elem_soln[19]);
-              nodal_soln[44]  = .5*(elem_soln[8] + elem_soln[20]);
+              nodal_soln[42]  = co0_5*(elem_soln[6] + elem_soln[18]);
+              nodal_soln[43]  = co0_5*(elem_soln[7] + elem_soln[19]);
+              nodal_soln[44]  = co0_5*(elem_soln[8] + elem_soln[20]);
 
               // node 15 components
-              nodal_soln[45]  = .5*(elem_soln[9]  + elem_soln[21]);
-              nodal_soln[46]  = .5*(elem_soln[10] + elem_soln[22]);
-              nodal_soln[47]  = .5*(elem_soln[11] + elem_soln[23]);
+              nodal_soln[45]  = co0_5*(elem_soln[9]  + elem_soln[21]);
+              nodal_soln[46]  = co0_5*(elem_soln[10] + elem_soln[22]);
+              nodal_soln[47]  = co0_5*(elem_soln[11] + elem_soln[23]);
 
               // node 16 components
-              nodal_soln[48]  = .5*(elem_soln[12] + elem_soln[15]);
-              nodal_soln[49]  = .5*(elem_soln[13] + elem_soln[16]);
-              nodal_soln[50]  = .5*(elem_soln[14] + elem_soln[17]);
+              nodal_soln[48]  = co0_5*(elem_soln[12] + elem_soln[15]);
+              nodal_soln[49]  = co0_5*(elem_soln[13] + elem_soln[16]);
+              nodal_soln[50]  = co0_5*(elem_soln[14] + elem_soln[17]);
 
               // node 17 components
-              nodal_soln[51]  = .5*(elem_soln[15] + elem_soln[18]);
-              nodal_soln[52]  = .5*(elem_soln[16] + elem_soln[19]);
-              nodal_soln[53]  = .5*(elem_soln[17] + elem_soln[20]);
+              nodal_soln[51]  = co0_5*(elem_soln[15] + elem_soln[18]);
+              nodal_soln[52]  = co0_5*(elem_soln[16] + elem_soln[19]);
+              nodal_soln[53]  = co0_5*(elem_soln[17] + elem_soln[20]);
 
               // node 18 components
-              nodal_soln[54]  = .5*(elem_soln[18] + elem_soln[21]);
-              nodal_soln[55]  = .5*(elem_soln[19] + elem_soln[22]);
-              nodal_soln[56]  = .5*(elem_soln[20] + elem_soln[23]);
+              nodal_soln[54]  = co0_5*(elem_soln[18] + elem_soln[21]);
+              nodal_soln[55]  = co0_5*(elem_soln[19] + elem_soln[22]);
+              nodal_soln[56]  = co0_5*(elem_soln[20] + elem_soln[23]);
 
               // node 19 components
-              nodal_soln[57]  = .5*(elem_soln[12] + elem_soln[21]);
-              nodal_soln[58]  = .5*(elem_soln[13] + elem_soln[22]);
-              nodal_soln[59]  = .5*(elem_soln[14] + elem_soln[23]);
+              nodal_soln[57]  = co0_5*(elem_soln[12] + elem_soln[21]);
+              nodal_soln[58]  = co0_5*(elem_soln[13] + elem_soln[22]);
+              nodal_soln[59]  = co0_5*(elem_soln[14] + elem_soln[23]);
 
               if (type == HEX27)
                 {
                   // node 20 components
-                  nodal_soln[60]  = .25*(elem_soln[0] + elem_soln[3] + elem_soln[6] + elem_soln[9]);
-                  nodal_soln[61]  = .25*(elem_soln[1] + elem_soln[4] + elem_soln[7] + elem_soln[10]);
-                  nodal_soln[62]  = .25*(elem_soln[2] + elem_soln[5] + elem_soln[8] + elem_soln[11]);
+                  nodal_soln[60]  = co0_5*co0_5*(elem_soln[0] + elem_soln[3] + elem_soln[6] + elem_soln[9]);
+                  nodal_soln[61]  = co0_5*co0_5*(elem_soln[1] + elem_soln[4] + elem_soln[7] + elem_soln[10]);
+                  nodal_soln[62]  = co0_5*co0_5*(elem_soln[2] + elem_soln[5] + elem_soln[8] + elem_soln[11]);
 
                   // node 21 components
-                  nodal_soln[63]  = .25*(elem_soln[0] + elem_soln[3] + elem_soln[12] + elem_soln[15]);
-                  nodal_soln[64]  = .25*(elem_soln[1] + elem_soln[4] + elem_soln[13] + elem_soln[16]);
-                  nodal_soln[65]  = .25*(elem_soln[2] + elem_soln[5] + elem_soln[14] + elem_soln[17]);
+                  nodal_soln[63]  = co0_5*co0_5*(elem_soln[0] + elem_soln[3] + elem_soln[12] + elem_soln[15]);
+                  nodal_soln[64]  = co0_5*co0_5*(elem_soln[1] + elem_soln[4] + elem_soln[13] + elem_soln[16]);
+                  nodal_soln[65]  = co0_5*co0_5*(elem_soln[2] + elem_soln[5] + elem_soln[14] + elem_soln[17]);
 
                   // node 22 components
-                  nodal_soln[66]  = .25*(elem_soln[3] + elem_soln[6] + elem_soln[15] + elem_soln[18]);
-                  nodal_soln[67]  = .25*(elem_soln[4] + elem_soln[7] + elem_soln[16] + elem_soln[19]);
-                  nodal_soln[68]  = .25*(elem_soln[5] + elem_soln[8] + elem_soln[17] + elem_soln[20]);
+                  nodal_soln[66]  = co0_5*co0_5*(elem_soln[3] + elem_soln[6] + elem_soln[15] + elem_soln[18]);
+                  nodal_soln[67]  = co0_5*co0_5*(elem_soln[4] + elem_soln[7] + elem_soln[16] + elem_soln[19]);
+                  nodal_soln[68]  = co0_5*co0_5*(elem_soln[5] + elem_soln[8] + elem_soln[17] + elem_soln[20]);
 
                   // node 23 components
-                  nodal_soln[69]  = .25*(elem_soln[6] + elem_soln[9]  + elem_soln[18] + elem_soln[21]);
-                  nodal_soln[70]  = .25*(elem_soln[7] + elem_soln[10] + elem_soln[19] + elem_soln[22]);
-                  nodal_soln[71]  = .25*(elem_soln[8] + elem_soln[11] + elem_soln[20] + elem_soln[23]);
+                  nodal_soln[69]  = co0_5*co0_5*(elem_soln[6] + elem_soln[9]  + elem_soln[18] + elem_soln[21]);
+                  nodal_soln[70]  = co0_5*co0_5*(elem_soln[7] + elem_soln[10] + elem_soln[19] + elem_soln[22]);
+                  nodal_soln[71]  = co0_5*co0_5*(elem_soln[8] + elem_soln[11] + elem_soln[20] + elem_soln[23]);
 
                   // node 24 components
-                  nodal_soln[72]  = .25*(elem_soln[9]  + elem_soln[0] + elem_soln[21] + elem_soln[12]);
-                  nodal_soln[73]  = .25*(elem_soln[10] + elem_soln[1] + elem_soln[22] + elem_soln[13]);
-                  nodal_soln[74]  = .25*(elem_soln[11] + elem_soln[2] + elem_soln[23] + elem_soln[14]);
+                  nodal_soln[72]  = co0_5*co0_5*(elem_soln[9]  + elem_soln[0] + elem_soln[21] + elem_soln[12]);
+                  nodal_soln[73]  = co0_5*co0_5*(elem_soln[10] + elem_soln[1] + elem_soln[22] + elem_soln[13]);
+                  nodal_soln[74]  = co0_5*co0_5*(elem_soln[11] + elem_soln[2] + elem_soln[23] + elem_soln[14]);
 
                   // node 25 components
-                  nodal_soln[75]  = .25*(elem_soln[12] + elem_soln[15] + elem_soln[18] + elem_soln[21]);
-                  nodal_soln[76]  = .25*(elem_soln[13] + elem_soln[16] + elem_soln[19] + elem_soln[22]);
-                  nodal_soln[77]  = .25*(elem_soln[14] + elem_soln[17] + elem_soln[20] + elem_soln[23]);
+                  nodal_soln[75]  = co0_5*co0_5*(elem_soln[12] + elem_soln[15] + elem_soln[18] + elem_soln[21]);
+                  nodal_soln[76]  = co0_5*co0_5*(elem_soln[13] + elem_soln[16] + elem_soln[19] + elem_soln[22]);
+                  nodal_soln[77]  = co0_5*co0_5*(elem_soln[14] + elem_soln[17] + elem_soln[20] + elem_soln[23]);
 
                   // node 26 components
-                  nodal_soln[78]  = .125*(elem_soln[0]  + elem_soln[3]  + elem_soln[6]  + elem_soln[9] +
-                                          elem_soln[12] + elem_soln[15] + elem_soln[18] + elem_soln[21]);
+                  nodal_soln[78]  =co0_5*co0_5*co0_5*(elem_soln[0] + elem_soln[3] + elem_soln[6] + elem_soln[9] +
+                                         elem_soln[12] + elem_soln[15] + elem_soln[18] + elem_soln[21]);
 
-                  nodal_soln[79]  = .125*(elem_soln[1]  + elem_soln[4]  + elem_soln[7]  + elem_soln[10] +
-                                          elem_soln[13] + elem_soln[16] + elem_soln[19] + elem_soln[22]);
+                  nodal_soln[79]  =co0_5*co0_5*co0_5*(elem_soln[1] + elem_soln[4] + elem_soln[7] + elem_soln[10] +
+                                         elem_soln[13] + elem_soln[16] + elem_soln[19] + elem_soln[22]);
 
-                  nodal_soln[80]  = .125*(elem_soln[2]  + elem_soln[5]  + elem_soln[8]  + elem_soln[11] +
+                  nodal_soln[80]  =co0_5*co0_5*co0_5*(elem_soln[2] + elem_soln[5] + elem_soln[8] + elem_soln[11] +
                                           elem_soln[14] + elem_soln[17] + elem_soln[20] + elem_soln[23]);
                 }
 
@@ -397,66 +398,66 @@
               nodal_soln[17]  = elem_soln[17];
 
               // node 6 components
-              nodal_soln[18]  = .5*(elem_soln[0] + elem_soln[3]);
-              nodal_soln[19]  = .5*(elem_soln[1] + elem_soln[4]);
-              nodal_soln[20]  = .5*(elem_soln[2] + elem_soln[5]);
+              nodal_soln[18]  = co0_5*(elem_soln[0] + elem_soln[3]);
+              nodal_soln[19]  = co0_5*(elem_soln[1] + elem_soln[4]);
+              nodal_soln[20]  = co0_5*(elem_soln[2] + elem_soln[5]);
 
               // node 7 components
-              nodal_soln[21]  = .5*(elem_soln[3] + elem_soln[6]);
-              nodal_soln[22]  = .5*(elem_soln[4] + elem_soln[7]);
-              nodal_soln[23]  = .5*(elem_soln[5] + elem_soln[8]);
+              nodal_soln[21]  = co0_5*(elem_soln[3] + elem_soln[6]);
+              nodal_soln[22]  = co0_5*(elem_soln[4] + elem_soln[7]);
+              nodal_soln[23]  = co0_5*(elem_soln[5] + elem_soln[8]);
 
               // node 8 components
-              nodal_soln[24]  = .5*(elem_soln[0] + elem_soln[6]);
-              nodal_soln[25]  = .5*(elem_soln[1] + elem_soln[7]);
-              nodal_soln[26]  = .5*(elem_soln[2] + elem_soln[8]);
+              nodal_soln[24]  = co0_5*(elem_soln[0] + elem_soln[6]);
+              nodal_soln[25]  = co0_5*(elem_soln[1] + elem_soln[7]);
+              nodal_soln[26]  = co0_5*(elem_soln[2] + elem_soln[8]);
 
               // node 9 components
-              nodal_soln[27]  = .5*(elem_soln[0] + elem_soln[9]);
-              nodal_soln[28]  = .5*(elem_soln[1] + elem_soln[10]);
-              nodal_soln[29]  = .5*(elem_soln[2] + elem_soln[11]);
+              nodal_soln[27]  = co0_5*(elem_soln[0] + elem_soln[9]);
+              nodal_soln[28]  = co0_5*(elem_soln[1] + elem_soln[10]);
+              nodal_soln[29]  = co0_5*(elem_soln[2] + elem_soln[11]);
 
               // node 10 components
-              nodal_soln[30]  = .5*(elem_soln[3] + elem_soln[12]);
-              nodal_soln[31]  = .5*(elem_soln[4] + elem_soln[13]);
-              nodal_soln[32]  = .5*(elem_soln[5] + elem_soln[14]);
+              nodal_soln[30]  = co0_5*(elem_soln[3] + elem_soln[12]);
+              nodal_soln[31]  = co0_5*(elem_soln[4] + elem_soln[13]);
+              nodal_soln[32]  = co0_5*(elem_soln[5] + elem_soln[14]);
 
               // node 11 components
-              nodal_soln[33]  = .5*(elem_soln[6] + elem_soln[15]);
-              nodal_soln[34]  = .5*(elem_soln[7] + elem_soln[16]);
-              nodal_soln[35]  = .5*(elem_soln[8] + elem_soln[17]);
+              nodal_soln[33]  = co0_5*(elem_soln[6] + elem_soln[15]);
+              nodal_soln[34]  = co0_5*(elem_soln[7] + elem_soln[16]);
+              nodal_soln[35]  = co0_5*(elem_soln[8] + elem_soln[17]);
 
               // node 12 components
-              nodal_soln[36]  = .5*(elem_soln[9]  + elem_soln[12]);
-              nodal_soln[37]  = .5*(elem_soln[10] + elem_soln[13]);
-              nodal_soln[38]  = .5*(elem_soln[11] + elem_soln[14]);
+              nodal_soln[36]  = co0_5*(elem_soln[9]  + elem_soln[12]);
+              nodal_soln[37]  = co0_5*(elem_soln[10] + elem_soln[13]);
+              nodal_soln[38]  = co0_5*(elem_soln[11] + elem_soln[14]);
 
               // node 13 components
-              nodal_soln[39]  = .5*(elem_soln[12] + elem_soln[15]);
-              nodal_soln[40]  = .5*(elem_soln[13] + elem_soln[16]);
-              nodal_soln[41]  = .5*(elem_soln[14] + elem_soln[17]);
+              nodal_soln[39]  = co0_5*(elem_soln[12] + elem_soln[15]);
+              nodal_soln[40]  = co0_5*(elem_soln[13] + elem_soln[16]);
+              nodal_soln[41]  = co0_5*(elem_soln[14] + elem_soln[17]);
 
               // node 14 components
-              nodal_soln[42]  = .5*(elem_soln[12] + elem_soln[15]);
-              nodal_soln[43]  = .5*(elem_soln[13] + elem_soln[16]);
-              nodal_soln[44]  = .5*(elem_soln[14] + elem_soln[17]);
+              nodal_soln[42]  = co0_5*(elem_soln[12] + elem_soln[15]);
+              nodal_soln[43]  = co0_5*(elem_soln[13] + elem_soln[16]);
+              nodal_soln[44]  = co0_5*(elem_soln[14] + elem_soln[17]);
 
               if (type == PRISM18)
                 {
                   // node 15 components
-                  nodal_soln[45]  = .25*(elem_soln[0] + elem_soln[3] + elem_soln[12] + elem_soln[9]);
-                  nodal_soln[46]  = .25*(elem_soln[1] + elem_soln[4] + elem_soln[13] + elem_soln[10]);
-                  nodal_soln[47]  = .25*(elem_soln[2] + elem_soln[5] + elem_soln[14] + elem_soln[11]);
+                  nodal_soln[45]  = co0_5*co0_5*(elem_soln[0] + elem_soln[3] + elem_soln[12] + elem_soln[9]);
+                  nodal_soln[46]  = co0_5*co0_5*(elem_soln[1] + elem_soln[4] + elem_soln[13] + elem_soln[10]);
+                  nodal_soln[47]  = co0_5*co0_5*(elem_soln[2] + elem_soln[5] + elem_soln[14] + elem_soln[11]);
 
                   // node 16 components
-                  nodal_soln[48]  = .25*(elem_soln[3] + elem_soln[6] + elem_soln[15] + elem_soln[12]);
-                  nodal_soln[49]  = .25*(elem_soln[4] + elem_soln[7] + elem_soln[16] + elem_soln[13]);
-                  nodal_soln[50]  = .25*(elem_soln[5] + elem_soln[8] + elem_soln[17] + elem_soln[14]);
+                  nodal_soln[48]  = co0_5*co0_5*(elem_soln[3] + elem_soln[6] + elem_soln[15] + elem_soln[12]);
+                  nodal_soln[49]  = co0_5*co0_5*(elem_soln[4] + elem_soln[7] + elem_soln[16] + elem_soln[13]);
+                  nodal_soln[50]  = co0_5*co0_5*(elem_soln[5] + elem_soln[8] + elem_soln[17] + elem_soln[14]);
 
                   // node 17 components
-                  nodal_soln[51]  = .25*(elem_soln[6] + elem_soln[0] + elem_soln[9]  + elem_soln[15]);
-                  nodal_soln[52]  = .25*(elem_soln[7] + elem_soln[1] + elem_soln[10] + elem_soln[16]);
-                  nodal_soln[53]  = .25*(elem_soln[8] + elem_soln[2] + elem_soln[11] + elem_soln[17]);
+                  nodal_soln[51]  = co0_5*co0_5*(elem_soln[6] + elem_soln[0] + elem_soln[9]  + elem_soln[15]);
+                  nodal_soln[52]  = co0_5*co0_5*(elem_soln[7] + elem_soln[1] + elem_soln[10] + elem_soln[16]);
+                  nodal_soln[53]  = co0_5*co0_5*(elem_soln[8] + elem_soln[2] + elem_soln[11] + elem_soln[17]);
                 }
 
               return;

--- src/systems/fem_system.C.orig	2015-11-08 14:55:20.137561034 +0100
+++ src/systems/fem_system.C	2015-11-18 07:44:49.415556028 +0100
@@ -95,6 +95,8 @@
       _sys.verify_analytic_jacobians != 0.0)
     {
       DenseMatrix<Number> analytic_jacobian(_femcontext.get_elem_jacobian());
+      std::complex<double> com1=-1.0;
+      std::complex<double> co1= 1.0;
 
       _femcontext.get_elem_jacobian().zero();
       // Logging of numerical jacobians is done separately
@@ -107,7 +109,7 @@
       analytic_jacobian.swap(_femcontext.get_elem_jacobian());
 
       // The matrix "analytic_jacobian" will now hold the error matrix
-      analytic_jacobian.add(-1.0, _femcontext.get_elem_jacobian());
+      analytic_jacobian.add( com1, _femcontext.get_elem_jacobian());
       Real error_norm = analytic_jacobian.l1_norm();
 
       Real relative_error = error_norm /
@@ -123,7 +125,7 @@
           libMesh::out.precision(16);
           libMesh::out << "J_analytic " << _femcontext.get_elem().id() << " = "
                        << _femcontext.get_elem_jacobian() << std::endl;
-          analytic_jacobian.add(1.0, _femcontext.get_elem_jacobian());
+          analytic_jacobian.add(co1, _femcontext.get_elem_jacobian());
           libMesh::out << "J_numeric " << _femcontext.get_elem().id() << " = "
                        << analytic_jacobian << std::endl;
 
@@ -195,12 +197,14 @@
 
           Real analytic_norm = analytic_jacobian.l1_norm();
           Real numerical_norm = _femcontext.get_elem_jacobian().l1_norm();
+          std::complex<double> com1=-1.0;
+          std::complex<double> co1=1.0;
 
           // If we can continue, we'll probably prefer the analytic jacobian
           analytic_jacobian.swap(_femcontext.get_elem_jacobian());
 
           // The matrix "analytic_jacobian" will now hold the error matrix
-          analytic_jacobian.add(-1.0, _femcontext.get_elem_jacobian());
+          analytic_jacobian.add(com1, _femcontext.get_elem_jacobian());
           Real error_norm = analytic_jacobian.l1_norm();
 
           Real relative_error = error_norm /
@@ -218,7 +222,7 @@
               libMesh::out.precision(16);
               libMesh::out << "J_analytic " << _femcontext.get_elem().id() << " = "
                            << _femcontext.get_elem_jacobian() << std::endl;
-              analytic_jacobian.add(1.0, _femcontext.get_elem_jacobian());
+              analytic_jacobian.add(co1, _femcontext.get_elem_jacobian());
               libMesh::out << "J_numeric " << _femcontext.get_elem().id() << " = "
                            << analytic_jacobian << std::endl;
               libMesh::out.precision(old_precision);
@@ -973,12 +977,14 @@
 
               Real analytic_norm = analytic_jacobian.l1_norm();
               Real numerical_norm = _femcontext.get_elem_jacobian().l1_norm();
+              std::complex<double> com1=-1.0;
+              std::complex<double> co1=1.0;
 
               // If we can continue, we'll probably prefer the analytic jacobian
               analytic_jacobian.swap(_femcontext.get_elem_jacobian());
 
               // The matrix "analytic_jacobian" will now hold the error matrix
-              analytic_jacobian.add(-1.0, _femcontext.get_elem_jacobian());
+              analytic_jacobian.add(com1, _femcontext.get_elem_jacobian());
               Real error_norm = analytic_jacobian.l1_norm();
 
               Real relative_error = error_norm /
@@ -994,7 +1000,7 @@
                   libMesh::out.precision(16);
                   libMesh::out << "J_analytic nonlocal = "
                                << _femcontext.get_elem_jacobian() << std::endl;
-                  analytic_jacobian.add(1.0, _femcontext.get_elem_jacobian());
+                  analytic_jacobian.add(co1, _femcontext.get_elem_jacobian());
                   libMesh::out << "J_numeric nonlocal = "
                                << analytic_jacobian << std::endl;
 
@@ -1201,6 +1207,7 @@
 #endif
 
   Real numerical_point_h = 0.;
+  std::complex<double> co2= 2.;
   if (_mesh_sys == this)
     numerical_point_h = numerical_jacobian_h * context.get_elem().hmin();
 
@@ -1276,7 +1283,7 @@
                 {
                   numeric_jacobian(i,total_j) =
                     (context.get_elem_residual()(i) - backwards_residual(i)) /
-                    2. / numerical_point_h;
+                    co2 / numerical_point_h;
                 }
             }
           else
@@ -1285,7 +1292,7 @@
                 {
                   numeric_jacobian(i,total_j) =
                     (context.get_elem_residual()(i) - backwards_residual(i)) /
-                    2. / my_h;
+                    co2 / my_h;
                 }
             }
         }
